---
title: "Clase 8: Modelos jerárquicos de supervivencia"
author: "David Murillo"
format:
  html:
    css: styles.css
---

El tema de esta clase es el célebre modelo Cormack-Jolly-Seber, o CJS (Cormack, 1964; Jolly, 1965; Seber, 1965), uno de los modelos estadísticos más famosos en ecología. El modelo CJS requiere datos de captura-recaptura en vivo (también llamados marcaje-recaptura o marcaje-reseñamiento) de individuos reconocibles individualmente. Esto generalmente significa individuos marcados (etiquetados), pero la identificación genética y, a veces, la variabilidad natural en el color o los patrones de plumas/pelaje/piel pueden servir igualmente bien para identificar de manera única a los individuos. El modelo CJS produce estimaciones de la probabilidad aparente de supervivencia  $\phi$, la probabilidad de que un individuo marcado permanezca vivo y en el área de estudio entre dos puntos temporales en los que se realizan los reconocimientos, y de la probabilidad de recaptura *p*, la probabilidad de que un individuo marcado se encuentre en un punto temporal determinado (nótese que la identificación en el tiempo amplio se refiere al re-avistamiento y cualquier otra forma de identificación individual). Sorprendentemente, el modelo CJS también estima la probabilidad de un evento (muerte), ¡aunque nunca observamos directamente ese evento!

Las bases y el diseño para producir datos susceptibles de análisis bajo un modelo CJS es aquel en el que se define un área de estudio fija y luego se sale y se intenta capturar y marcar tantos individuos como se definan. En ocasiones fijas, el primer registro de un individuo reconocible por sus marcas naturales o genéticas, etc. es funcionalmente idéntico al primer marcado de ese individuo. Luego, en cada ocasión, se registra la identidad de los individuos que ya tienen una marca y se coloca una nueva marca en aquellos que no la tienen. Los datos básicos se resumen en la matriz de historial de captura o detección **Y** de dimensiones *n* x *T*, donde *T* es el número de ocasiones Y *n* es el número de animales marcados primero hasta la ocasión *T*-1; aquellos marcados en la ocasión *T* no proporcionan ninguna información sobre la supervivencia y pueden ignorarse. La entrada (*i*,*t*) de la matriz contiene un 1 cuando el individuo *i* fue detectado en la ocasión 1 y un 0 cuando no lo fue.

Es crucial que la extensión espacial de un área de estudio permanezca igual a lo largo del tiempo, porque en el modelo CJS estamos estimando la supervivencia aparente: el producto de la supervivencia real (*S*) y la probabilidad de permanecer en el área de estudio (es decir, fidelidad *F*). A partir de datos simples (no espaciales) de captura-recaptura, no es posible separar estos dos componentes (aunque se hace posible con modelos CJS espacialmente explícitos. Por lo tanto, si extiende su área de estudio a lo largo del tiempo, más individuos marcados tenderán a permanecer dentro de sus límites, *F* aumentará y también lo hará la supervivencia aparente. A menudo, las ocasiones de captura se espacian regularmente, por ejemplo, durante la temporada de reproducción en cada año, pero no es necesario que así sea, y hay diferentes formas de lidiar con intervalos de tiempo desiguales. Además, lo ideal es que la captura sea instantánea y no que se extienda de forma continua en el tiempo (también existen modelos de supervivencia para datos recopilados en tiempo continuo. Por último, si queremos que nuestras estimaciones caractericen a la población en general en lugar de solo a la muestra de individuos capturados, debemos apuntar a capturar una muestra aleatoria de individuos de la población (y sin extendernos en esto, solo afirmamos que esto puede ser más desafiante de lo que parece a primera vista).

## Modelos básicos de Cormack-Jolly-Seber

### El modelo básico de CJS como modelo de espacio de estados o jerárquico

Fundamentalmente, el modelo CJS puede considerarse un modelo jerárquico o de espacio de estados (SSM), porque distingue entre un estado latente binario (vivo, muerto) y un estado observado binario (detectado, no detectado). La dinámica del estado latente se describe de la manera habitual de un SSM, describiendo el estado inicial de cada individuo y utilizando una regla probabilística por la que cambia de estado desde el momento *t* a *t* +1. Sin embargo, hay dos cosas un tanto peculiares. En primer lugar, el estado latente inicial de cada individuo no se modela de forma probabilística, sino que se fija en 1. Es decir, el modelo condiciona la primera captura (cuando el individuo estaba vivo por definición) y solo describe los eventos aleatorios posteriores a la primera captura. Esto es bastante diferente en otros modelos de estado sólido relacionados para respuestas binarias, como el modelo Jolly-Seber o en el modelo de ocupación dinámica, los cuales modelan una matriz de historial de detección desde el inicio (es decir, con la columna 1) de manera probabilística. En segundo lugar, en el modelo CJS, las transiciones en el estado latente solo son posibles en una dirección, de vivo a muerto. Esto es nuevamente diferente en el modelo de ocupación dinámica relacionado, donde las colonizaciones son posibles. Por último, los modelos típicos de "supervivencia del nido" o "destino conocido" difieren del modelo CJS principalmente por la ausencia de un modelo de observación, porque su estado latente se observa perfectamente si es que se observa. Todos estos modelos son equivalentes a los modelos ocultos de Markov (HMM; Zucchini et al., 2016): modelos de series temporales jerárquicos con estados discretos solamente y donde la regla de transición se refiere a un solo paso atrás en el tiempo, es decir, el modelo es markoviano de orden 1. Sin embargo, de manera un tanto confusa, la probabilidad del modelo CJS a menudo se expresa de una manera no jerárquica, en lugar de construirse de una manera jerárquica explícita. Para esto, la matriz básica del historial de captura se agrega por cohorte de liberación y ocasión de recaptura en el llamado *formato m-array*. La probabilidad de cada celda de esta matriz agregada se puede expresar como una función de parámetros específicos del tiempo de aparente supervivencia y recaptura, y el ajuste del modelo se realiza maximizando una probabilidad multinomial producto. Esta es la probabilidad maximizada en la mayoría de los programas frecuentistas para el modelo CJS.

Con el formato m-array, la probabilidad CJS se colapsa sobre los estados latentes *z* (ver más abajo) y, por lo tanto, en un sentido técnico, el modelo ya no es jerárquico, aunque conceptualmente lo es. En cambio, en programas bayesianos como BUGS, podemos ajustar el modelo tanto utilizando la construcción jerárquica directa de la probabilidad, como utilizando la agregación de matriz m-array. Podría decirse que la primera es conceptualmente más fácil de entender y, además, permite ajustar modelos más generales, pero la segunda es computacionalmente más eficiente (y a menudo mucho más eficiente).

En el formato SSM, los datos de historial de captura observados y, son iguales a 1 si el individuo *i* es detectado (es decir, capturado) en la ocasión *t* y 0 si no es detectado. Se describen en términos de una variable latente $z_{i,t}$, que dice si ese individuo estaba vivo ($z_{i,t} = 1$) o muerto ($z_{i,t} = 0$) en la ocasión *t*, y dos parámetros, las probabilidades de supervivencia aparente $\phi$ y de recaptura $p$, que, para mayor claridad, aquí asumimos primero que son constantes. Dado que el modelo CJS se define condicional a la primera captura y se conoce el estado verdadero en la primera captura, también necesitamos un vector que contenga la ocasión de marcado, llamado $f$, para describir los datos observados de manera probabilística, es decir, para formar su probabilidad. Luego, describimos la parte latente del sistema en dos líneas:

$z_{i,f = 1}$ (para la ocasión de marcado)

$z_{i,t+1}|z_{i,t} \sim Bernoulli(z_{i,1}\phi)$ (para todas las ocasiones posteriores)

Por lo tanto, después de la ocasión de marcado, el estado vivo/muerto es un simple ensayo de Bernoulli condicional con probabilidad de éxito $z_i\phi$; la multiplicación con $z_i$, asegura que el individuo $i$ permanezca muerto una vez que haya muerto. Este es el submodelo de proceso del modelo jerárquico. Para describir el proceso de observación, asumimos que no hay falsos positivos (por ejemplo, ninguna marca se identifica erróneamente) y adoptamos otra distribución de Bernoulli (condicional).

$y_{i,t}|z_{i,t}\sim Bernoulli(z_{i,t}p)$ El (sub)modelo de observación

Por lo tanto, que un individuo sea detectado o no depende de dos cosas: si está vivo y de la probabilidad de recaptura $p$. En el caso más general, podemos permitir que ambos parámetros del modelo difieran según el individuo $i$ y el tiempo $t$ y, a continuación, se puede especificar una gran cantidad de patrones para ellos agregando efectos de covariables o efectos aleatorios. Un conjunto de presencia o ausencia de efectos temporales conduce a la clasificación clásica de modelos $\phi(t)p(t)$, $\phi(t)p(.)$, $\phi(.)p(t)$, $\phi(.)p(.)$ clasificación de modelos con parámetros que son constantes (.) o totalmente dependientes del tiempo ($t$) (Cooch y White, 2019).

Referencia, Capítulo 3: [Aplied Hierarchical Modeling in Ecology, Volumen 2](https://www.sciencedirect.com/book/9780128237687/applied-hierarchical-modeling-in-ecology-analysis-of-distribution-abundance-and-species-richness-in-r-and-bugs)

::: panel-tabset

## Datos sobre el GWWA

```{r}
encounter_matrix <- readRDS("data/GWWA_CR.rds")

Hab <- readRDS("data/Hab.rds")
```



```{r, echo=FALSE, eval=FALSE, message=FALSE, warning=FALSE}

library(rjags) # JAGS must be installed seperately
library(lattice)
library(coda)
library(R2jags)
library(tidyverse)

gwwa.hab <- read.csv("data/RittersonGWWA/Encounter.csv")


################ Create vector of study dates ########################
nbdates <- c(
  seq(as.Date("02/01/06", "%m/%d/%y"), as.Date("04/15/06", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/06", "%m/%d/%y"), as.Date("04/15/07", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/07", "%m/%d/%y"), as.Date("04/15/08", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/08", "%m/%d/%y"), as.Date("04/15/09", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/09", "%m/%d/%y"), as.Date("04/15/10", "%m/%d/%y"),
      by="days"),  
  seq(as.Date("10/01/10", "%m/%d/%y"), as.Date("04/15/11", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/11", "%m/%d/%y"), as.Date("04/15/12", "%m/%d/%y"),
      by="days"),
  seq(as.Date("10/01/12", "%m/%d/%y"), as.Date("04/15/13", "%m/%d/%y"),
      by="days"))
nbdates



### Function to create a matrix with information about known latent stae z (Kery & Schaub, p.182)
known.state.cjs <- function(ch){
  state <- ch
  for (i in 1:dim(ch)[1]){
    n1 <- min(which(ch[i,]==1))
    n2 <- max(which(ch[i,]==1))
    state[i,n1:n2] <- 1
    state[i,n1] <- NA
  }
  state[state==0] <- NA
  return(state)
}



################ Season design matrix #########################
season <- factor(ifelse(diff(nbdates) == 1, "Within", "Among"),
                 levels=c("Within", "Among"))
season[length(season)+1] <- 'Among'
seasonDM <- model.matrix(~season-1)
amongs <- which(season=="Among")

season.ind <- c(rep(1, times=amongs[1]), rep(2:length(amongs),
                                             times=diff(amongs)))
data.frame(date=nbdates, season)
data.frame(season,season.ind)

format(nbdates, "%Y")


str(gwwa.hab)
levels(gwwa.hab$Colors)

gwwa.hab$Date <- as.Date(gwwa.hab$Date, "%m/%d/%y")

gwwa.hab <- gwwa.hab %>%
  mutate(Day = as.numeric(Date - min(Date)))  # Day as number of days since first observation

# Create the encounter matrix and capture the first site of each individual
site_values <- c(
  'Above MINAE' = 1, 
  'Alexander Trejos' = 2, 
  'Ana Fouseca' = 3,
  'Andres Fouseca' = 4,
  'Clara y Victor Marin' = 5, 
  'Co-op 2nd growth' = 6,
  'Eduardo Villegas' = 7,
  'Federico Miranda' = 8,
  'Hernan Gonzalez' = 9,
  'Jam Rd entrance' = 10,
  'Jamaica Rd (PC Ced19)' = 11,
  'Jose Sibaja' = 12,
  'La Jolla' = 13,
  'Los Planes - Above Waterfall' = 14,
  'Los Planes - Arancibia Lodge' = 15,
  'Los Planes - Arancibia lookout' = 16,
  'Los Planes - far upper fragment' = 17,
  'Los Planes - lower' = 18,
  'Los Planes - upper' = 19,
  'Luis Angel/Gringo Cubano' = 20,
  'Luis Urena' = 21,
  'Marcos Gonzalez' = 22,
  'Miguel Molino' = 23,
  'Mirella (PC Ced18 above house)' = 24,
  'Olher Trejos' = 25,
  'Talapia' = 26,
  'Tonio' = 27
)

# Adjust the encounter_matrix code to repeat these site values
encounter_matrix <- gwwa.hab %>%
  mutate(Survey_Interval = floor((Day - min(Day)) / 7) + 1) %>%
  group_by(Colors, Survey_Interval) %>%
  summarise(Encountered = ifelse(any(Encountered == "Yes"), 1, 0),
            First_Site = first(Site), .groups = "drop") %>%
  pivot_wider(names_from = Survey_Interval, values_from = Encountered, values_fill = list(Encountered = 0)) %>%
  left_join(
    tibble(First_Site = names(site_values), Site_Value = site_values),
    by = "First_Site"
  )



hab<-read.csv("data/Hab.csv", header=TRUE)

#Canopy.ht
library(reshape2)

Canopy<-hab[,c(1,7,8)]

b<-melt(Canopy, id=c("Colors", "Point_num"), measured="Canopy.Height", na.rm=FALSE) #may wish to chandge na.rm arguement
Canopy.ht<-dcast(b, ... ~ Point_num)

VarNames<-c("Colors", "Variable", "initial", "point1", "point2", "point3", "point4", "point5", "point6", "point7", "point8", "point9",
            "point10", "point11", "point12", "point13", "point14", "point15", "point16", "point17", "point18", "point19")
colnames(Canopy.ht)<-VarNames
head(Canopy.ht)

Canopy.ht.avg<-apply(Canopy.ht[,3:22], 1, mean, na.rm=T)
Canopy.ht.avg

#vines
plot(hab$Vine)
Vines<-hab[,c(1,7,10)]
b<-melt(Vines, id=c("Colors", "Point_num"), measured="Vine", na.rm=FALSE) #may wish to change na.rm arguement
Vine.num<-dcast(b, ... ~ Point_num)

VarNames<-c("Colors", "Variable", "initial", "point1", "point2", "point3", "point4", "point5", "point6", "point7", "point8", "point9",
            "point10", "point11", "point12", "point13", "point14", "point15", "point16", "point17", "point18", "point19")
colnames(Vine.num)<-VarNames
head(Vine.num)

Vine.avg<-apply(Vine.num[,3:21], 1, mean, na.rm=T)
Vine.avg


#Leaf

m<-as.matrix(hab$Leaf)
m[m=="low"]<-1
m[m=="med"]<-2
m[m=="high"]<-3
m<-as.numeric(m)

R<-hab[,c(1,7)]
S<-cbind(R, m)

b<-melt(S, id=c("Colors", "Point_num"), measured="m", na.rm=FALSE) #may wish to chandge na.rm arguement
Leaf<-dcast(b, ... ~ Point_num)

VarNames<-c("Colors", "Variable", "initial", "point1", "point2", "point3", "point4", "point5", "point6", "point7", "point8", "point9",
            "point10", "point11", "point12", "point13", "point14", "point15", "point16", "point17", "point18", "point19")
colnames(Leaf)<-VarNames
head(Leaf)
Leaf.avg<-apply(Leaf[,3:22], 1, mean, na.rm=T)
Leaf.avg


Hab <- data.frame(Canopy = Canopy.ht.avg, Vine =  Vine.avg, Leaf = Leaf.avg)



```

## Preparar lista

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(jagsUI)
```


```{r, warning=FALSE, message=FALSE, results='hide'}

ch <- as.matrix(encounter_matrix[,3:43])
sites <- encounter_matrix$Site_Value


# Get sample size

(nweeks <- ncol(ch))

(nsites <- nrow(data.frame(encounter_matrix$Site_Value)))

library(AHMbook)

ch2marray(ch)

marr <- ch2marray(ch) 

# Calculate the number of birds released each week

r <- apply(marr, 1, sum)


MARR <- array(NA, dim = c(40, nweeks,nsites))
R <- array(NA, dim = c(40, nsites))

for(k in 1:nsites){
  ma <- ch2marray(ch)
  MARR[,,k] <- ma
  R[,k] <- apply(ma, 1, sum)
}


str(bdata <- list(MARR = MARR, R = R, n.site = nsites, n.occ = nweeks,
                  Canopy = Hab$Canopy, Vine = Hab$Vine, Leaf = Hab$Leaf ))
```


## Null model

```{r, warning=FALSE, message=FALSE}

cat(file = "Survival1.txt", "
model {

  # Priors for constant survival and recapture
  for (t in 1:(n.occ-1)){
    phi[t] <- ilogit(mu.lphi)  # constant survival
    p[t] <- ilogit(mu.lp)      # constant recapture
  }

  # Hyperpriors for global parameters (mean survival and recapture)
  mu.lphi ~ dunif(0, 1)  # Uniform prior for mean survival
  mu.lp ~ dunif(0, 1)    # Uniform prior for mean recapture

  # Likelihood for the m-array data (no random effects)
  for (s in 1:n.site){
    for (t in 1:(n.occ-1)){
      MARR[t, 1:n.occ, s] ~ dmulti(pr[t, 1:n.occ, s], R[t, s])
    }
  }

  # Define the cell probabilities of the m-array (constant survival and recapture)
  for (t in 1:(n.occ-1)){
    q[t] <- 1 - p[t]
  }

  for (s in 1:n.site){
    for (t in 1:(n.occ-1)){
      pr[t, t, s] <- phi[t] * p[t]  # Probability of recapture
      
      # Above diagonal: only calculate if j <= n.occ-1
      for (j in (t+1):(n.occ-1)){
        pr[t, j, s] <- prod(phi[t:j]) * prod(q[t:(j-1)]) * p[j]
      }
      
      # Ensure valid probabilities for the last column (j = n.occ)
      pr[t, n.occ, s] <- 1 - sum(pr[t, 1:(n.occ-1), s])

      # Below diagonal (no recapture)
      for (j in 1:(t-1)){
        pr[t, j, s] <- 0
      }
    }
  }
}
")


inits <- function() {list(pNorm = runif(1,0.2, 0.8), 
                          phiWithin=runif(2, 0.8,1), 
                          phiAmong=runif(1, 0.2,0.8))}

# Parameters monitored
params <- c("mu.lphi", "mu.lp")

# MCMC settings
# na <- 1000 ; ni <- 30000 ; nt <- 10 ; nb <- 20000 ; nc <- 3
na <- 100 ; ni <- 300 ; nt <- 1 ; nb <- 200 ; nc <- 3  # ~~~ for testing

# Call JAGS (ART 192 min), check convergence and summarize posteriors

model1 <- jags(bdata, inits, params, "Survival1.txt", n.adapt = na, n.chains = nc,
             n.thin = nt, n.iter = ni, n.burnin = nb)

```

## Canopy as predicted

```{r}
# Data structure for JAGS model
str(bdata <- list(MARR = MARR, R = R, n.site = nsites, n.occ = nweeks,
                  Canopy = Hab$Canopy, Vine = Hab$Vine, Leaf = Hab$Leaf))

# Specify the model in BUGS language
cat(file = "cjs_canopy_model.txt", "
model {

  # Priors and linear models
  for (s in 1:n.site) {
    for (t in 1:(n.occ-1)) {
      phi[t, s] <- ilogit(lphi[t, s])  # Survival
      p[t, s] <- ilogit(lp[t, s])      # Recapture

      # Linear predictor for survival using Canopy, Vine, and Leaf as covariates
      lphi[t, s] <- alpha.mu.lphi + beta1 * Canopy[s] + beta2 * Vine[s] + beta3 * Leaf[s]
      
      # Simplified recapture model (can be modified if needed)
      lp[t, s] <- mu.lp
    }

    # Back-transform site means
    mean.phi.site[s] <- ilogit(alpha.mu.lphi + beta1 * Canopy[s] + beta2 * Vine[s] + beta3 * Leaf[s])
    mean.p.site[s] <- ilogit(mu.lp)
  }

  # Hyperpriors
  alpha.mu.lphi <- logit(mean.phi)
  mean.phi ~ dunif(0, 1)
  mu.lp <- logit(mean.p)
  mean.p ~ dunif(0, 1)

  # Coefficients for Canopy, Vine, and Leaf
  beta1 ~ dnorm(0, 0.1)
  beta2 ~ dnorm(0, 0.1)
  beta3 ~ dnorm(0, 0.1)

  # Multinomial likelihood for m-array data
  for (s in 1:n.site) {
    for (t in 1:(n.occ-1)) {
      MARR[t, 1:n.occ, s] ~ dmulti(pr[t, , s], R[t, s])
    }
  }

  # Define cell probabilities for the m-array
  for (s in 1:n.site) {
    for (t in 1:(n.occ-1)) {
      q[t, s] <- 1 - p[t, s]  # Probability of non-recapture
      pr[t, t, s] <- phi[t, s] * p[t, s]
      
      for (j in (t+1):(n.occ-1)) {
        pr[t, j, s] <- prod(phi[t:j, s]) * prod(q[t:(j-1), s]) * p[j, s]
      }
      
      for (j in 1:(t-1)) {
        pr[t, j, s] <- 0
      }
    }
  }

  # Last column: probability of non-recapture
  for (s in 1:n.site) {
    for (t in 1:(n.occ-1)) {
      pr[t, n.occ, s] <- 1 - sum(pr[t, 1:(n.occ-1), s])
    }
  }
}
")

inits <- function() {
  list(
    beta1 = rnorm(1, 0, 1),     # Initial value for Canopy effect
    beta2 = rnorm(1, 0, 1),     # Initial value for Vine effect
    beta3 = rnorm(1, 0, 1),     # Initial value for Leaf effect
    mean.phi = runif(1, 0, 1),  # Mean survival on probability scale
    mean.p = runif(1, 0, 1)     # Mean recapture on probability scale
  )
}

parameters <- c(
  "beta1",            # Effect of Canopy
  "beta2",            # Effect of Vine
  "beta3",            # Effect of Leaf
  "mean.phi",         # Mean survival probability
  "mean.p",           # Mean recapture probability
  "mean.phi.site",    # Site-level survival probabilities
  "mean.p.site"       # Site-level recapture probabilities
)


model2 <- jags(bdata, inits, parameters, "cjs_canopy_model.txt", n.adapt = na, n.chains = nc,
             n.thin = nt, n.iter = ni, n.burnin = nb)

model2
```

## Grafico

```{r}
Canopy <- seq(min(Hab$Canopy), max(Hab$Canopy), length =100)

Canopy_df <- data.frame(Predicted = plogis(mean(model2$mean$mean.phi) +  mean(model2$mean$beta1)*Canopy),
                        IC2.5 = plogis(mean(model2$q2.5$mean.phi) +  mean(model2$q2.5$beta1)*Canopy),
                        IC97.5 = plogis(mean(model2$q97.5$mean.phi) +  mean(model2$q97.5$beta1)*Canopy),
                        Canopy =  Canopy)


ggplot(Canopy_df, aes(x= Canopy, y = Predicted))+
  geom_line()+
  geom_ribbon(aes(ymin= IC2.5,
                  ymax= IC97.5),
              alpha= 0.4, fill = "lightblue")+
  labs(y = "Supervivencia diaria",
       x= "Altura de canopy")+
  theme_classic()

```


:::

