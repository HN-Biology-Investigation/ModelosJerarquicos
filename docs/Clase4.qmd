---
title: "Modelar densidad con muestreo de distancia jerárquico"
author: "David Murillo"
format:
  html:
    css: styles.css
---

En esta clase, exploraremos el uso de Unmarked para modelar la abundancia de especies a partir de datos recopilados mediante trasectos. Desde los fundamentos, explicaremos paso a paso cómo utilizar este paquete, cubriendo el proceso completo: desde el ajuste inicial del modelo hasta la selección, validación e interpretación de los resultados. También abordaremos la presentación de los datos para su inclusión en publicaciones científicas, asegurando un entendimiento completo y la capacidad de aplicar estos modelos de manera efectiva en contextos de investigación y divulgación científica.

Cargar paquete

```{r, warning=FALSE, message=FALSE}
library(unmarked)
library(tidyverse)
library(AICcmodavg)
```

Cargar base de datos

```{r}
library(readxl)

AvesTransecto <- read_excel("data/Transectos.xlsx", sheet = 2)
AvesTransecto <- read.delim("data/Transectos.txt")
PaisajeMetricas <- readRDS("data/Paisaje250.rds")
```

::: panel-tabset

## Procesar base de datos

```{r}
AvesTransectoLimpia <- AvesTransecto %>% 
  filter(!is.na(Hora_I))
```

Observar que ave cuenta con mayor cantidad de observaciones

```{r}
head(AvesTransectoLimpia %>% 
  group_by(Especie) %>% 
  count() %>% 
  arrange(desc(n)))
```

Filtrar algunas especies insectivoras

```{r}
Insectivoras <- AvesTransectoLimpia %>%
  filter(Deteccion == "Visual") %>% 
  group_by(Sitio, Distancia, Especie) %>% 
  summarise(Abundancia = n()) %>% 
  pivot_wider(names_from = Especie, values_from = Abundancia, values_fill = 0) %>% 
  select(Sitio, Distancia, CARPUS, SETCIT, SETVIR, TROAED, BASCUL, MIOOLE,
                        SETPET, BASRUF, MNIVAR, OREPER, MYOMIN, SETPEN, SETRUT,
                        VERCHR, VERCYA) %>% 
  mutate(Distancia_Level = cut(Distancia, 
                     breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, Inf), 
                     labels = c("Level1", "Level2", "Level3", "Level4", "Level5",
                                "Level6", "Level7", "Level8", "Level9"))) 

Insectivoras$Abundancia <- rowSums(Insectivoras[, c("CARPUS", "SETCIT", "SETVIR", "TROAED",
                                                    "BASCUL", "MIOOLE",
                                                    "SETPET", "BASRUF", "MNIVAR", "OREPER",
                                                    "MYOMIN", "SETPEN",
                                                    "SETRUT", "VERCHR", "VERCYA")])

Insectivoras2 <- Insectivoras %>% 
  group_by(Sitio, Distancia_Level) %>% 
  summarise(Abundancia = max(Abundancia, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Distancia_Level, values_from = Abundancia, values_fill = 0) %>% 
  select(Sitio, Level1, Level2, Level3, Level4, Level5)

head(Insectivoras2)

table(Insectivoras$Distancia)
```

## Agragar covariables de paisaje

```{r}
Insectivoras3 <- Insectivoras2 %>% 
  mutate(Site_ID = Sitio) %>% 
  left_join(PaisajeMetricas, by= "Site_ID")
```

## Prepara data en formato unmarked

```{r}
y <- cbind(Insectivoras3$Level1, Insectivoras3$Level2,
           Insectivoras3$Level3, Insectivoras3$Level4,
           Insectivoras3$Level5)

SiteCovs <- Insectivoras3[,c(8,17)]

Insectivoras3$Longitud <- c(100)

InsectivorasUMF <- unmarkedFrameGDS(y= y ,
                                   siteCovs = SiteCovs,
                                   dist.breaks = seq(0, 35, by= 6),
                                   survey = "line",
                                   unitsIn = "m",
                                   tlength = Insectivoras3$Longitud,
                                   numPrimary = 1)
```

## Fit model

```{r, warning=FALSE}

fmp1 <- gdistsamp(~Forest, ~ 1, ~ 1, keyfun = "halfnorm", output = "density", unitsOut = "ha",  InsectivorasUMF)

fmp2 <- gdistsamp(~Forest, ~ 1, ~ 1, keyfun = "hazard", output = "density", unitsOut = "ha", InsectivorasUMF)

fmp3 <- gdistsamp(~Forest, ~ 1, ~ 1, keyfun = "exp", output = "density", unitsOut = "ha", InsectivorasUMF)





```

## Seleccionar modelo mas adecuado

```{r}
Modelos <- list(fmp1, fmp2, fmp3)
Nombres <- c("fmp1", "fmp2", "fmp3")

aictab(Modelos, Nombres, sort = TRUE)

```

## Validar modelo

```{r, warning=FALSE, message=FALSE}

fitstats <- function(Mod_global2) {
  observed <- getY(Mod_global2@data)
  expected <- fitted(Mod_global2)
  resids <- residuals(Mod_global2)
  sse <- sum(resids^2,na.rm=TRUE)
  chisq <- sum((observed - expected)^2 / expected,na.rm=TRUE)
  freeTuke <- sum((sqrt(observed) - sqrt(expected))^2,na.rm=TRUE)
  out <- c(SSE=sse, Chisq=chisq, freemanTukey=freeTuke)
  return(out)
}

(pb <- parboot(fmp1, fitstats, nsim=100, report=1))

cHat_pb <- pb@t0[2] / mean(pb@t.star[,2])


MigGOF <- Nmix.gof.test(fmp1, nsim = 100, report = 3)
```

## Revisar resultados

```{r}
summary(fmp1)
confint(fmp1, type = "lambda", level= 0.95)

exp(coef(fmp1, type="lambda", altNames=TRUE))

```

## Prepara para graficar abundancia

```{r}
Forest <- data.frame(Forest = seq(min(Insectivoras3$Forest, na.rm = TRUE), max(Insectivoras3$Forest, na.rm = TRUE), length.out = 100))

Forest_pre <- predict(fmp2, newdata = Forest, type = "lambda", appendData = TRUE)
```


## Graficar

```{r}
ggplot(data = Forest_pre, aes(x= Forest, y= Predicted))+
  geom_ribbon(aes(ymin = lower, ymax= upper),
              fill = "lightblue", alpha = 0.4)+
  geom_line()+
  labs(title = "Abundancia de Insectivoros versus fecha")+
  theme_classic()
```




:::

![HN Biology Investigation Academy](HN%20Cursos%20publicidad/HN%20Biology%20Inv%20large.jpg)
