---
title: "Clase 2: Modelos N-Mixture para estimar abundancia"
author: "David Murillo"
format:
  html:
    css: styles.css
---

## **EL Paquete de R `unmarked`**

El paquete de R unmarked ([Fiske y Chandler, 2011](https://doi.org/10.18637/jss.v043.i10)) proporciona una plataforma integral para el análisis de muchos de los modelos jerárquicos (HMs) que cubrimos en este curso. Implementa estimaciones basadas en verosimilitud marginal y ofrece funciones de soporte para la organización de datos, resúmenes y análisis gráficos. El paquete fue desarrollado originalmente por Ian Fiske como estudiante de posgrado en la Universidad Estatal de Carolina del Norte, y fue asumido en gran medida por Richard Chandler alrededor del año 2011.

El paquete unmarked ofrece un marco unificado para la manipulación de datos, exploración de datos, ajuste de modelos (mediante máxima verosimilitud), selección de modelos, promediado de modelos, evaluación del ajuste del modelo (Gof, por sus siglas en inglés), predicción, e implementa ideas como bootstrapping, predicción, estimación empírica Bayesiana y otros procedimientos de inferencia y análisis. Los modelos jerárquicos principales disponibles en unmarked son los siguientes:

- Modelo de ocupación por sitios de una sola temporada ("estático") (MacKenzie et al., 2002; Tyre et al., 2003)

- Modelo estático de Royle-Nichols (Royle y Nichols, 2003)

- Modelo estático de ocupación con falsos positivos (Royle y Link, 2006; Miller et al., 2011)

- Modelos estáticos de ocupación penalizada (Hutchinson et al., 2015)

- Modelo estático binomial de mezcla N (Royle, 2004b)

- Modelo estático multinomial de mezcla N (Royle, 2004a; Dorazio et al., 2005; Langtimm et al., 2011)

- Modelo jerárquico estático de muestreo por distancias (Royle et al., 2004)

- Versiones de "población abierta" para muchos de los anteriores: 1) Modelo dinámico de ocupación (MacKenzie et al., 2003), 2) Modelo de mezcla multinomial con emigración temporal (Chandler et al., 2011), 3) Muestreo por distancias con emigración temporal, modelo dinámico de *N*-Mixture (Dail y Madsen, 2011), muestreo por distancias dinámico (Sollmann et al., 2015).

Con frecuencia, los modeladores jerárquicos en formación tienen dificultades para determinar qué tipo de modelo deberían utilizar para abordar un problema específico. Una clave dicotómica simple puede ayudar a guiar al usuario hacia la funcionalidad adecuada de unmarked (Figura 2.1).

![](booksPictures/Screenshot 2024-11-19 071853.png)
Figura 2.1 Árbol de decisión para los modelos disponibles en el paquete de R unmarked. Una pregunta científica o de manejo (el signo de interrogación en el cuadro superior) sugiere primero un enfoque en abundancia u ocurrencia; en segundo lugar, si el sistema es estático o dinámico; y en tercer lugar, el método de muestreo utilizado. Todos estos factores determinan el modelo apropiado para su estudio.


::: panel-tabset

## Cargar base de datos


```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(unmarked)
library(AICcmodavg)
library(MuMIn)
```


```{r}
Tits <- read.csv("data/Tits.csv")

str(Tits)
```

Seleccionar variables necesarias

```{r}

Tits <- Tits %>% 
  select(X1, X2, X3,
         elev, forest,
         time.1, time.2, time.3,
         date.1, date.2, date.3,
         dur.1, dur.2, dur.3)

head(Tits)
```

## Formatear base de datos a formato unmarked


```{r}

y <- Tits[,c("X1", "X2", "X3")]

SiteVar <- Tits[,c("elev", "forest")]

ObsVar <- list(Time = Tits[,c("time.1", "time.2", "time.3")],
               Date = Tits[,c("date.1", "date.2", "date.3")],
               Dur = Tits[,c("dur.1", "dur.2", "dur.3")])

```

```{r}

Tits_umf <- unmarkedFramePCount(y = y, siteCovs = SiteVar, 
                                    obsCovs= ObsVar )

summary(Tits_umf)

```

## Ajustar modelo de deteccion

```{r, warning=FALSE, message=FALSE}


ModelDet0 <- pcount(~1 ~1, Tits_umf ) ##Null model

ModelDet1 <- pcount(~Date ~1, Tits_umf )

ModelDet2 <- pcount(~Time ~1, Tits_umf )

ModelDet3 <- pcount(~Dur ~1, Tits_umf )
```

## Seleccion de modelo de deteccion

```{r}

DetModels <- list(ModelDet0, ModelDet1, ModelDet2, ModelDet3)

DetNames <- c("Nulo", "Fecha", "Hora", "Dur")

aictab(DetModels, DetNames, sort = TRUE)
```

## Ajustar modelo de Abundancia

```{r, warning=FALSE, message=FALSE}

ModelAbun0 <- pcount(~Date ~ 1, Tits_umf) 

ModelAbun1 <- pcount(~Date ~ elev, Tits_umf)

ModelAbun2 <- pcount(~Date ~ forest, Tits_umf)

ModelAbun3 <- pcount(~Date ~ elev + forest, Tits_umf)
```

## Seleccion de modelo de abundancia

```{r}
AbunModels <- list(ModelAbun0, ModelAbun1, ModelAbun2, ModelAbun3)

AbunNames <- c("Nulo", "elev", "forest", "elev + forest")

aictab(AbunModels, AbunNames, sort = TRUE)
```

## Resumen de los resultados

```{r}
summary(ModelAbun3)
confint(ModelAbun3, type = "state", level = 0.95)
```

## Bondad de ajuste

```{r, warning=FALSE, message=FALSE}


fitstats <- function(Mod_global2) {
  observed <- getY(Mod_global2@data)
  expected <- fitted(Mod_global2)
  resids <- residuals(Mod_global2)
  sse <- sum(resids^2,na.rm=TRUE)
  chisq <- sum((observed - expected)^2 / expected,na.rm=TRUE)
  freeTuke <- sum((sqrt(observed) - sqrt(expected))^2,na.rm=TRUE)
  out <- c(SSE=sse, Chisq=chisq, freemanTukey=freeTuke)
  return(out)
}

(pb <- parboot(ModelAbun3, fitstats, nsim=100, report=1))

cHat_pb <- pb@t0[2] / mean(pb@t.star[,2])


MigGOF <- Nmix.gof.test(ModelAbun3, nsim = 100, report = 3)


```

## Prepar data para graficar

```{r}
Elev <- data.frame(elev = seq(min(Tits$elev, na.rm = TRUE), max(Tits$elev, na.rm = TRUE), length.out = 100),
                   forest = mean(Tits$forest, na.rm = TRUE))

Forest <- data.frame(forest = seq(min(Tits$forest, na.rm = TRUE), max(Tits$forest, na.rm = TRUE), length.out = 100),
                   elev = mean(Tits$elev, na.rm = TRUE))
                                 
```

```{r}
Elev_pre <- predict(ModelAbun3, newdata= Elev, appendData = TRUE, type = "state")

Forest_pre <- predict(ModelAbun3, newdata= Forest, appendData = TRUE, type = "state")
```


## Graficar modelo

```{r}
ggplot(data= Elev_pre, aes(x= elev, y= Predicted))+
  geom_ribbon(aes(ymin= lower,
                  ymax= upper), fill = "lightblue") +
  geom_line(color= "black") +
  labs(x = "Elevacion", 
       y = "Abundancia")+
  ggtitle("Abundancia explicada por la elevacion") +
  theme_classic()
```
```{r}
ggplot(data= Forest_pre, aes(x= forest, y= Predicted))+
  geom_ribbon(aes(ymin= lower,
                  ymax= upper), fill = "lightblue") +
  geom_line(color= "black") +
  labs(x = "% Bosque", 
       y = "Abundancia")+
  ggtitle("Abundancia explicada por el % bosque") +
  theme_classic()
```


:::

![HN Biology Investigation Academy](HN%20Cursos%20publicidad/HN%20Biology%20Inv%20large.jpg)
